<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="./sproject_html.xsl"?>
<!DOCTYPE sproject SYSTEM "sproject.dtd">
<sproject>
    <course database="Oracle" version="11">
        <cname>Databázové systémy</cname>
            <code>BI-DBS.21</code>
            <semester>B222</semester>
            <seminar>Wednesday 9:15, Odd week, paralelka 1245091879105</seminar>
    </course>
        <author>
            <aname>Matúš Tkáč</aname>
            <uname>tkacmatu</uname>
            <email>tkacmatu@fit.cvut.cz</email>
        </author>
    <content>
        <declaration>I declare that I have developed my semestral work independently. All the sources I used are listed in the section References.</declaration>
            <title>Hotel Rooms Database</title>
        <description>
            <title>Description</title>
                    <para>Hotel Aikilam must keep a database of sold rooms in order to keep track of hotel capacity and ensure that it does not sell more rooms than the hotel&apos;s actual capacity.Many people and money are dependent on this database, so it must be accurate and reliable.</para>
                    <para></para>
                    <para>To ensure profitability, apart from selling rooms only on **Aikilam homepage**, hotel has contracts with various different **travel agencies** that list the hotel. The database keeps track of each travel *agency&apos;s id* and *agency name*.</para>
                    <para></para>
                    <para>Both Hotel Aikilam and the travel agencies maintain a daily **sales report** that includes total sales per day, that means *date*, *number of reservations*, *number of guests* and *number of rooms*.</para>
                    <para></para>
                    <para>Different types of **rooms** are available, each with a limited number. It has room id and number of beds . The different **room classes** are standard, standard sea view, superior, family room and family deluxe room. Since the hotel is quite large, they also have different **locations** in the resort where the rooms are located (left wing, right wing, by the pool, by the sea).  Both entities room class and location will include description attribute due to further explaining what given room offers to the customers.</para>
                    <para></para>
                    <para>The database also stores data about **guests** ts such as their *guest id*, *first name*, *last name*, *phone number*,  *email address*,  address and *billing information*.  **Address** will include a *address id*, *state*, *city*, *street* and *postal code*.</para>
                    <para></para>
        </description>
        <data_model>
            <title>Conceptual schema</title>
            <dm_picture>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="conceptual_schema.png"/>
                    </imageobject>
                </mediaobject>
            </dm_picture>
            <dm_discussion>
                        <para>This conceptual schema doesn&apos;t contain loops.</para>
            </dm_discussion>
        </data_model>
        <relational_model>
            <title>Relational schema</title>
            <rm_picture>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="relational_schema.png"/>
                    </imageobject>
                </mediaobject>
            </rm_picture>
        </relational_model>
        <queries>
            <title>Queries</title>
            <dotazy>
                    <dotaz dotaz_id="D1">
                        <popis_dotazu>
                                <para>Retrieve names of agencies that have sold some rooms.  </para>
                        </popis_dotazu>
                            <relacni_algebra>{reservation[reservation.agency_id=travel_agency.agency_id]travel_agency}[agency_name]</relacni_algebra>
                            <sql>select distinct agency_name
from (
    select distinct reservation.reservation_id,
                    reservation.id_aikilam_homepage,
                    reservation.agency_id,
                    reservation.date_of_reservation,
                    reservation.number_of_guests,
                    reservation.check_in,
                    reservation.check_out,
                    reservation.number_of_nights,
                    reservation.payment_status,
                    travel_agency.agency_id as agency_id_1,
                    travel_agency.agency_name
    from reservation
    join travel_agency on reservation.agency_id = travel_agency.agency_id
) r1;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D2">
                        <popis_dotazu>
                                <para>Retrieve names of agencies that have not sold any rooms on particular date.  </para>
                        </popis_dotazu>
                            <relacni_algebra>edited_reservations:=reservation(date_of_reservation=&apos;2023-04-22&apos;)
{edited_reservations!*&gt;travel_agency}[agency_name]</relacni_algebra>
                            <sql>with edited_reservations as (
    select distinct *
    from reservation
    where date_of_reservation = &apos;2023-04-22&apos;
)
select distinct agency_name
from (
    select distinct *
    from travel_agency
    except
    select distinct agency_id,
                    agency_name
    from travel_agency
    natural join edited_reservations
) r1;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D3">
                        <popis_dotazu>
                                <para>Retrieve only those rooms, which are meant for families (Family Room, Family Deluxe Room). </para>
                        </popis_dotazu>
                            <relacni_algebra>{room_class(class_name=&apos;Family Room&apos; ∨ class_name=&apos;Family Deluxe Room&apos;)[room_class.class_name_id=room.class_name_id]room}[room_id,class_name,number_of_beds]
</relacni_algebra>
                            <sql>select distinct room_id,
                class_name,
                number_of_beds
from (
    select distinct r1.class_name_id,
                    r1.class_name,
                    r1.description,
                    room.room_id,
                    room.class_name_id as class_name_id_1,
                    room.location_name_id,
                    room.number_of_beds
    from (
        select distinct *
        from room_class
        where class_name = &apos;Family Room&apos; or class_name = &apos;Family Deluxe Room&apos;
    ) r1
    join room on r1.class_name_id = room.class_name_id
) r2;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D4">
                        <popis_dotazu>
                                <para>Retrieve all guests that have made a reservation through every agency (their first and last name).</para>
                        </popis_dotazu>
                            <relacni_algebra>reservations_with_guests:=reservation[reservation.reservation_id=reservation_guest.reservation_id]reservation_guest
{reservations_with_guests[guest_id,agency_id]÷travel_agency[agency_id]*guest}[first_name,last_name]</relacni_algebra>
                            <sql>WITH RESERVATIONS_WITH_GUESTS AS (
    SELECT DISTINCT RESERVATION.reservation_id,
                    RESERVATION.id_aikilam_homepage,
                    RESERVATION.agency_id,
                    RESERVATION.date_of_reservation,
                    RESERVATION.number_of_guests,
                    RESERVATION.check_in,
                    RESERVATION.check_out,
                    RESERVATION.number_of_nights,
                    RESERVATION.payment_status,
                    RESERVATION_GUEST.reservation_id AS reservation_id_1,
                    RESERVATION_GUEST.guest_id
    FROM RESERVATION
    JOIN RESERVATION_GUEST ON RESERVATION.reservation_id = RESERVATION_GUEST.reservation_id
)
SELECT DISTINCT first_name,
                last_name
FROM (
    SELECT DISTINCT guest_id
    FROM (
        SELECT DISTINCT guest_id,
                        agency_id
        FROM RESERVATIONS_WITH_GUESTS
    ) R1
    EXCEPT
    SELECT DISTINCT guest_id
    FROM (
        SELECT DISTINCT *
        FROM (
            SELECT DISTINCT guest_id
            FROM (
                SELECT DISTINCT guest_id,
                                agency_id
                FROM RESERVATIONS_WITH_GUESTS
            ) R1
        ) R2
        CROSS JOIN (
            SELECT DISTINCT agency_id
            FROM TRAVEL_AGENCY
        ) R3
        EXCEPT
        SELECT DISTINCT guest_id,
                        agency_id
        FROM RESERVATIONS_WITH_GUESTS
    ) R4
) R5
NATURAL JOIN GUEST;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D5">
                        <popis_dotazu>
                                <para>Check if the D1 querry is returning a correct value (Retrieve all guests that have made a reservation through every agency)</para>
                        </popis_dotazu>
                            <relacni_algebra>reservations_with_guests:=reservation[reservation.reservation_id=reservation_guest.reservation_id]reservation_guest
travel_agency
\
{{reservations_with_guests[guest_id,agency_id]÷travel_agency[agency_id]}*guest*&gt;reservations_with_guests*&gt;travel_agency}</relacni_algebra>
                            <sql>WITH RESERVATIONS_WITH_GUESTS AS (
    SELECT DISTINCT RESERVATION.reservation_id,
                    RESERVATION.id_aikilam_homepage,
                    RESERVATION.agency_id,
                    RESERVATION.date_of_reservation,
                    RESERVATION.number_of_guests,
                    RESERVATION.check_in,
                    RESERVATION.check_out,
                    RESERVATION.number_of_nights,
                    RESERVATION.payment_status,
                    RESERVATION_GUEST.reservation_id AS reservation_id_1,
                    RESERVATION_GUEST.guest_id
    FROM RESERVATION
    JOIN RESERVATION_GUEST ON RESERVATION.reservation_id = RESERVATION_GUEST.reservation_id
)
SELECT DISTINCT *
FROM TRAVEL_AGENCY
EXCEPT
SELECT DISTINCT agency_id,
                agency_name
FROM TRAVEL_AGENCY TRAVEL_AGENCY2
NATURAL JOIN (
    SELECT DISTINCT reservation_id,
                    id_aikilam_homepage,
                    agency_id,
                    date_of_reservation,
                    number_of_guests,
                    check_in,
                    check_out,
                    number_of_nights,
                    payment_status,
                    reservation_id_1,
                    guest_id
    FROM RESERVATIONS_WITH_GUESTS RESERVATIONS_WITH_GUESTS1
    NATURAL JOIN (
        SELECT DISTINCT *
        FROM (
            SELECT DISTINCT guest_id
            FROM (
                SELECT DISTINCT guest_id,
                                agency_id
                FROM RESERVATIONS_WITH_GUESTS
            ) R1
            EXCEPT
            SELECT DISTINCT guest_id
            FROM (
                SELECT DISTINCT *
                FROM (
                    SELECT DISTINCT guest_id
                    FROM (
                        SELECT DISTINCT guest_id,
                                        agency_id
                        FROM RESERVATIONS_WITH_GUESTS
                    ) R1
                ) R2
                CROSS JOIN (
                    SELECT DISTINCT agency_id
                    FROM TRAVEL_AGENCY TRAVEL_AGENCY1
                ) R3
                EXCEPT
                SELECT DISTINCT guest_id,
                                agency_id
                FROM RESERVATIONS_WITH_GUESTS
            ) R4
        ) R5
        NATURAL JOIN GUEST
    ) R6
) R7;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D6">
                        <popis_dotazu>
                                <para>Retrieve all guests and if they gave us a phone number, then also their room details</para>
                        </popis_dotazu>
                            <sql>select * 
from guest left join room on guest.room_id=room.room_id and guest.phone_number is not null;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D7">
                        <popis_dotazu>
                                <para>Retrieve  all reservations from specified date as well as agenies that did not have any reservations and reservations that dont have agency.</para>
                        </popis_dotazu>
                            <sql>with edited_reservations as (
    select *
    from reservation
    where date_of_reservation = &apos;2023-04-22&apos;
)
select * 
from edited_reservations full join travel_agency on (edited_reservations.agency_id=travel_agency.agency_id and edited_reservations.agency_id is not null);</sql>
                    </dotaz>
                    <dotaz dotaz_id="D8">
                        <popis_dotazu>
                                <para>Create view of  vip reservations. Vip reservations are reservations that have already paid for the hotel and will stay in our hotel for at least a week.
Retrieve the ones that made the reservation through hotel.</para>
                        </popis_dotazu>
                            <sql>create or replace view VIP_reservations as
select * from reservation where payment_status=&apos;paid&apos; and (number_of_nights&gt;6)
with check option;

select * from VIP_reservations
where id_aikilam_homepage is not null;
</sql>
                    </dotaz>
                    <dotaz dotaz_id="D9">
                        <popis_dotazu>
                                <para>We received a message saying that all of the reservations from date 21.4.2023 are already paid so we need to update the table.</para>
                        </popis_dotazu>
                            <sql>begin;
select * from reservation where date_of_reservation=&apos;2023-04-21&apos; order by agency_id;

update reservation
set payment_status=&apos;paid&apos;
where date_of_reservation in (select date_of_reservation from reservation where date_of_reservation=&apos;2023-04-21&apos;);

select * from reservation where date_of_reservation=&apos;2023-04-21&apos; order by agency_id;

rollback;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D10">
                        <popis_dotazu>
                                <para>For each room count the actual number of guests and retrieve.</para>
                        </popis_dotazu>
                            <sql>select *,(select count(*) from guest where guest.room_id=room.room_id) as Guests_in_room
from room;



</sql>
                    </dotaz>
                    <dotaz dotaz_id="D11">
                        <popis_dotazu>
                                <para>Retrieve all rooms that are not full.</para>
                        </popis_dotazu>
                            <sql>select *
from (
  select room.*, count(guest.guest_id) AS guests_in_room
  from room
  left join guest on guest.room_id = room.room_id
  group by room.room_id
) as room_guests
where room_guests.number_of_beds != room_guests.guests_in_room;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D12">
                        <popis_dotazu>
                                <para>Clone last room and insert it to the table.</para>
                        </popis_dotazu>
                            <sql>begin;

insert into room (class_name_id, location_name_id, number_of_beds)
select class_name_id, location_name_id, number_of_beds 
from room
order by room_id desc
limit 1;

rollback;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D13">
                        <popis_dotazu>
                                <para>Delete all reservations made 21.4.2023.</para>
                        </popis_dotazu>
                            <sql>begin;
select * from reservation;

delete from reservation 
where date_of_reservation in (select date_of_reservation from reservation where date_of_reservation=&apos;2023-04-21&apos;);

select * from reservation;

rollback;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D14">
                        <popis_dotazu>
                                <para>For every agency retrieve how many guests they brought together. I only want to count this from year 2023 and only sales reports that have more then one guest.</para>
                        </popis_dotazu>
                            <sql>select agency_id, sum(number_of_guests) as total_number_of_guests
from sales_report
where agency_id is not null and extract(year from date)&gt;=2023
group by agency_id
having sum(number_of_guests)&gt;1
order by agency_id;
</sql>
                    </dotaz>
                    <dotaz dotaz_id="D15">
                        <popis_dotazu>
                                <para>Retrieve names of agencies that have not sold any rooms on particular date.</para>
                        </popis_dotazu>
                            <sql>-- 1st option
with edited_reservations as (
    select *
    from reservation
    where date_of_reservation = &apos;2023-04-22&apos;
)
select agency_name from travel_agency
where agency_id not in(
 select agency_id from edited_reservations where agency_id is not null
);

-- 2nd option
with edited_reservations as (
    select *
    from reservation
    where date_of_reservation = &apos;2023-04-22&apos;
)
select agency_name from travel_agency
where not exists ( select agency_id from edited_reservations where travel_agency.agency_id=edited_reservations.agency_id);

-- 3rd option
with edited_reservations as (
    select *
    from reservation
    where date_of_reservation = &apos;2023-04-22&apos;
)
select agency_name
from (
    select *
    from travel_agency
    except
    select agency_id,
                    agency_name
    from travel_agency
    natural join edited_reservations
) r1;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D16">
                        <popis_dotazu>
                                <para>Retreive all rooms that are located near pool and their room class is standard.</para>
                        </popis_dotazu>
                            <sql>select r.* from room r join room_class rc using(class_name_id) where class_name=&apos;Standard&apos;
union 
select r.* from room r join location l using(location_name_id) where location_name=&apos;By the sea&apos;;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D17">
                        <popis_dotazu>
                                <para>Retreive all rooms that are located on left wing and their room class is not Superior.</para>
                        </popis_dotazu>
                            <sql>select r.* from room r join room_class rc using(class_name_id) where not class_name=&apos;Superior&apos;
intersect 
select r.* from room r join location l using(location_name_id) where location_name=&apos;Left wing&apos;;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D18">
                        <popis_dotazu>
                                <para>Retrieve all guest email adresses that are from China.</para>
                        </popis_dotazu>
                            <relacni_algebra>{address(country=&apos;China&apos;)[address.address_id=guest.address_id]guest}[email_address]</relacni_algebra>
                            <sql>SELECT DISTINCT email_address
FROM (
    SELECT DISTINCT R1.address_id,
                    R1.country,
                    R1.city,
                    R1.street,
                    R1.postal_code,
                    GUEST.guest_id,
                    GUEST.address_id AS address_id_1,
                    GUEST.room_id,
                    GUEST.first_name,
                    GUEST.last_name,
                    GUEST.phone_number,
                    GUEST.email_address,
                    GUEST.payment_method
    FROM (
        SELECT DISTINCT *
        FROM ADDRESS
        WHERE country = &apos;China&apos;
    ) R1
    JOIN GUEST ON R1.address_id = GUEST.address_id
) R2;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D19">
                        <popis_dotazu>
                                <para>Retrieve all rooms that are free.</para>
                        </popis_dotazu>
                            <relacni_algebra>room \ {room &lt;* guest}</relacni_algebra>
                            <sql>select distinct *
from room
except
select distinct room_id,
                class_name_id,
                location_name_id,
                number_of_beds
from room room1
natural join guest;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D20">
                        <popis_dotazu>
                                <para>Retrive all agency names together with their ids.</para>
                        </popis_dotazu>
                            <relacni_algebra>{sales_report[sales_report.agency_id=travel_agency.agency_id]travel_agency}[agency_id, agency_name]</relacni_algebra>
                            <sql>SELECT DISTINCT agency_id,
                agency_name
FROM (
    SELECT DISTINCT SALES_REPORT.sales_report_id,
                    SALES_REPORT.id_aikilam_homepage,
                    SALES_REPORT.agency_id,
                    SALES_REPORT.date,
                    SALES_REPORT.number_of_reservations,
                    SALES_REPORT.number_of_guests,
                    SALES_REPORT.number_of_rooms,
                    TRAVEL_AGENCY.agency_id AS agency_id_1,
                    TRAVEL_AGENCY.agency_name
    FROM SALES_REPORT
    JOIN TRAVEL_AGENCY ON SALES_REPORT.agency_id = TRAVEL_AGENCY.agency_id
) R1;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D21">
                        <popis_dotazu>
                                <para>Retrieve all guests that are from Poland.</para>
                        </popis_dotazu>
                            <relacni_algebra>address(country=&apos;Poland&apos;)[address.address_id=guest.address_id]guest
</relacni_algebra>
                            <sql>SELECT DISTINCT R1.address_id,
                R1.country,
                R1.city,
                R1.street,
                R1.postal_code,
                GUEST.guest_id,
                GUEST.address_id AS address_id_1,
                GUEST.room_id,
                GUEST.first_name,
                GUEST.last_name,
                GUEST.phone_number,
                GUEST.email_address,
                GUEST.payment_method
FROM (
    SELECT DISTINCT *
    FROM ADDRESS
    WHERE country = &apos;Poland&apos;
) R1
JOIN GUEST ON R1.address_id = GUEST.address_id;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D22">
                        <popis_dotazu>
                                <para>Retrive room classes of all rooms that are free.</para>
                        </popis_dotazu>
                            <relacni_algebra>room_edited:=room \ {room &lt;* guest}
{room_edited[room_edited.class_name_id=room_class.class_name_id]room_class}[description]
</relacni_algebra>
                            <sql>WITH ROOM_EDITED AS (
    SELECT DISTINCT *
    FROM ROOM
    EXCEPT
    SELECT DISTINCT room_id,
                    class_name_id,
                    location_name_id,
                    number_of_beds
    FROM ROOM ROOM1
    NATURAL JOIN GUEST
)
SELECT DISTINCT description
FROM (
    SELECT DISTINCT ROOM_EDITED.room_id,
                    ROOM_EDITED.class_name_id,
                    ROOM_EDITED.location_name_id,
                    ROOM_EDITED.number_of_beds,
                    ROOM_CLASS.class_name_id AS class_name_id_1,
                    ROOM_CLASS.class_name,
                    ROOM_CLASS.description
    FROM ROOM_EDITED
    JOIN ROOM_CLASS ON ROOM_EDITED.class_name_id = ROOM_CLASS.class_name_id
) R1;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D23">
                        <popis_dotazu>
                                <para>Retrive rooms with most beds, if there are more rooms with same number of beds, retrieve them as well.</para>
                        </popis_dotazu>
                            <sql>select *
from room
where number_of_beds = (
  select max(number_of_beds)
  from room
);
</sql>
                    </dotaz>
                    <dotaz dotaz_id="D24">
                        <popis_dotazu>
                                <para>Retrieve all addresses that have more than one guest.</para>
                        </popis_dotazu>
                            <sql>select address_id
from guest
group by address_id
having count(*) &gt; 1;
</sql>
                    </dotaz>
                    <dotaz dotaz_id="D25">
                        <popis_dotazu>
                                <para>Retrieve sales report that has highest number of reservations.</para>
                        </popis_dotazu>
                            <sql>select *
from sales_report
where number_of_reservations = (
  select max(number_of_reservations)
  from sales_report
);
</sql>
                    </dotaz>
            </dotazy>
            <pokryti_dotazu>
                        <radek>
                            <kategorie>A</kategorie>
                            <odkazy>
                                    <link url="#D1">D1</link>
                                    <link url="#D2">D2</link>
                                    <link url="#D3">D3</link>
                                    <link url="#D4">D4</link>
                                    <link url="#D5">D5</link>
                                    <link url="#D6">D6</link>
                                    <link url="#D7">D7</link>
                                    <link url="#D15">D15</link>
                                    <link url="#D16">D16</link>
                                    <link url="#D17">D17</link>
                                    <link url="#D18">D18</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D20">D20</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D22">D22</link>
                            </odkazy>
                            <kategorie_popis>A - Positive query on at least two joined tables</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>AR</kategorie>
                            <odkazy>
                                    <link url="#D1">D1</link>
                                    <link url="#D2">D2</link>
                                    <link url="#D3">D3</link>
                                    <link url="#D4">D4</link>
                                    <link url="#D5">D5</link>
                                    <link url="#D18">D18</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D20">D20</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D22">D22</link>
                            </odkazy>
                            <kategorie_popis>A (RA) - Positive query on at least two joined tables</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>B</kategorie>
                            <odkazy>
                                    <link url="#D2">D2</link>
                            </odkazy>
                            <kategorie_popis>B - Negative query on at least two joined tables</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>C</kategorie>
                            <odkazy>
                                    <link url="#D3">D3</link>
                            </odkazy>
                            <kategorie_popis>C - Select only those related to...</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>D1</kategorie>
                            <odkazy>
                                    <link url="#D4">D4</link>
                            </odkazy>
                            <kategorie_popis>D1 - Select all related to - universal quantification query</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>D2</kategorie>
                            <odkazy>
                                    <link url="#D5">D5</link>
                            </odkazy>
                            <kategorie_popis>D2 - Result check of D1 query</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F1</kategorie>
                            <odkazy>
                                    <link url="#D1">D1</link>
                                    <link url="#D3">D3</link>
                                    <link url="#D4">D4</link>
                                    <link url="#D5">D5</link>
                                    <link url="#D18">D18</link>
                                    <link url="#D20">D20</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D22">D22</link>
                            </odkazy>
                            <kategorie_popis>F1 - JOIN ON</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F2</kategorie>
                            <odkazy>
                                    <link url="#D2">D2</link>
                                    <link url="#D4">D4</link>
                                    <link url="#D5">D5</link>
                                    <link url="#D15">D15</link>
                                    <link url="#D16">D16</link>
                                    <link url="#D17">D17</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D22">D22</link>
                            </odkazy>
                            <kategorie_popis>F2 - NATURAL JOIN|JOIN USING</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F2R</kategorie>
                            <odkazy>
                                    <link url="#D2">D2</link>
                                    <link url="#D4">D4</link>
                                    <link url="#D5">D5</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D22">D22</link>
                            </odkazy>
                            <kategorie_popis>F2 (RA) - NATURAL JOIN|JOIN USING</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F3</kategorie>
                            <odkazy>
                                    <link url="#D4">D4</link>
                                    <link url="#D5">D5</link>
                            </odkazy>
                            <kategorie_popis>F3 - CROSS JOIN</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F4</kategorie>
                            <odkazy>
                                    <link url="#D6">D6</link>
                                    <link url="#D11">D11</link>
                            </odkazy>
                            <kategorie_popis>F4 - LEFT|RIGHT OUTER JOIN</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F5</kategorie>
                            <odkazy>
                                    <link url="#D7">D7</link>
                            </odkazy>
                            <kategorie_popis>F5 - FULL (OUTER) JOIN</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G1</kategorie>
                            <odkazy>
                                    <link url="#D9">D9</link>
                                    <link url="#D13">D13</link>
                                    <link url="#D15">D15</link>
                                    <link url="#D23">D23</link>
                                    <link url="#D25">D25</link>
                            </odkazy>
                            <kategorie_popis>G1 - Nested query in WHERE clause</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G2</kategorie>
                            <odkazy>
                                    <link url="#D1">D1</link>
                                    <link url="#D2">D2</link>
                                    <link url="#D3">D3</link>
                                    <link url="#D4">D4</link>
                                    <link url="#D5">D5</link>
                                    <link url="#D11">D11</link>
                                    <link url="#D15">D15</link>
                                    <link url="#D18">D18</link>
                                    <link url="#D20">D20</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D22">D22</link>
                            </odkazy>
                            <kategorie_popis>G2 - Nested query in FROM clause</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G2R</kategorie>
                            <odkazy>
                                    <link url="#D1">D1</link>
                                    <link url="#D2">D2</link>
                                    <link url="#D3">D3</link>
                                    <link url="#D4">D4</link>
                                    <link url="#D5">D5</link>
                                    <link url="#D18">D18</link>
                                    <link url="#D20">D20</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D22">D22</link>
                            </odkazy>
                            <kategorie_popis>G2 (RA) - Nested query in FROM clause</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G3</kategorie>
                            <odkazy>
                                    <link url="#D10">D10</link>
                            </odkazy>
                            <kategorie_popis>G3 - Nested query in SELECT clause</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G4</kategorie>
                            <odkazy>
                                    <link url="#D15">D15</link>
                            </odkazy>
                            <kategorie_popis>G4 - Correlated nested query (EXISTS|NOT EXISTS)</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>H1</kategorie>
                            <odkazy>
                                    <link url="#D16">D16</link>
                            </odkazy>
                            <kategorie_popis>H1 - Set unification - UNION</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>H2</kategorie>
                            <odkazy>
                                    <link url="#D2">D2</link>
                                    <link url="#D4">D4</link>
                                    <link url="#D5">D5</link>
                                    <link url="#D15">D15</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D22">D22</link>
                            </odkazy>
                            <kategorie_popis>H2 - Set difference - MINUS or EXCEPT</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>H2R</kategorie>
                            <odkazy>
                                    <link url="#D2">D2</link>
                                    <link url="#D4">D4</link>
                                    <link url="#D5">D5</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D22">D22</link>
                            </odkazy>
                            <kategorie_popis>H2 (RA) - Set difference - MINUS or EXCEPT</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>H3</kategorie>
                            <odkazy>
                                    <link url="#D17">D17</link>
                            </odkazy>
                            <kategorie_popis>H3 - Set intersection - INTERSECT</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>I1</kategorie>
                            <odkazy>
                                    <link url="#D10">D10</link>
                                    <link url="#D11">D11</link>
                                    <link url="#D14">D14</link>
                                    <link url="#D23">D23</link>
                                    <link url="#D24">D24</link>
                                    <link url="#D25">D25</link>
                            </odkazy>
                            <kategorie_popis>I1 - Aggregate functions (count|sum|min|max|avg)</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>I2</kategorie>
                            <odkazy>
                                    <link url="#D11">D11</link>
                                    <link url="#D14">D14</link>
                                    <link url="#D24">D24</link>
                            </odkazy>
                            <kategorie_popis>I2 - Aggregate function over grouped rows - GROUP BY (HAVING)</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>J</kategorie>
                            <odkazy>
                                    <link url="#D15">D15</link>
                            </odkazy>
                            <kategorie_popis>J - Same query in 3 different sql statements</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>K</kategorie>
                            <odkazy>
                                    <link url="#D14">D14</link>
                            </odkazy>
                            <kategorie_popis>K - All clauses in one query - SELECT FROM WHERE GROUP BY HAVING ORDER BY</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>L</kategorie>
                            <odkazy>
                                    <link url="#D8">D8</link>
                            </odkazy>
                            <kategorie_popis>L - View</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>M</kategorie>
                            <odkazy>
                                    <link url="#D8">D8</link>
                            </odkazy>
                            <kategorie_popis>M - Query over a view</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>N</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                            </odkazy>
                            <kategorie_popis>N - INSERT, which insert a set of rows, which are the result of another subquery (an INSERT command which has VALUES clause replaced by a nested query.</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>O</kategorie>
                            <odkazy>
                                    <link url="#D9">D9</link>
                            </odkazy>
                            <kategorie_popis>O - UPDATE with nested SELECT statement</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>P</kategorie>
                            <odkazy>
                                    <link url="#D13">D13</link>
                            </odkazy>
                            <kategorie_popis>P - DELETE with nested SELECT statement</kategorie_popis>
                        </radek>
            </pokryti_dotazu>
        </queries>
        <scripts>
            <title>Scripts</title>
            <para>
                <link url="./create.sql">create.sql</link>
            </para>
            <para>
                <link url="./insert.sql">insert.sql</link>
            </para>
        </scripts>
        <conclussions>
            <title>Conclusion</title>
                    <para>This semestral project broadened my horizons. It was really great to see how databases that we use every day work and to create one of my own. I have to admit that it was time-consuming, but the time was well spent. I tried to design the whole database as close to reality as possible, so that I would have the possibility to use it in the future. However, while working on the project, I continuously found mistakes and nonsensical relationships that were quite exhausting because they caused major setbacks during the work, and I would have done many things differently if I had decided to do this all over again. Overall, I enjoyed doing the project and it gave me a lot of experience with databases.</para>
        </conclussions>
        <references>
            <title>References</title>
                    <para>Malikia Resort Abu Dabbab </para>
                    <para>- https://malikiaabudabbab.com</para>
                    <para>Courses</para>
                    <para>- https://courses.fit.cvut.cz/BI-DBS/</para>
                    <para>Youtube</para>
                    <para>- https://www.youtube.com/playlist?list=PLOskWMbmSI-4uR2sI3JFerE04lKRsWQ8i</para>
                    <para>- https://www.youtube.com/playlist?list=PLBAJqytZusMo6czA4nW5_k89Aok_g7-pF</para>
                    <para>Chatgpt 3.5, 3.0</para>
                    <para>- https://chat.openai.com</para>
                    <para>Mockaroo </para>
                    <para>- https://www.mockaroo.com</para>
        </references>
    </content>
</sproject>
